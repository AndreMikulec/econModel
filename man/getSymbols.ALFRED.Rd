% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getSymbols.ALFRED.R
\name{getSymbols.ALFRED}
\alias{getSymbols.ALFRED}
\title{Download Federal Reserve Economic Data - ALFRED(R)}
\usage{
getSymbols.ALFRED(
  Symbols,
  env,
  return.class = "xts",
  returnIndex = "ObservationDate",
  VintageId = NULL,
  nameVintagedId = F,
  EarliestLastUpdDate = NULL,
  LookBack = 3,
  VintagesPerQuery = 12,
  FullOldestVintageData = F,
  DataSheet = F,
  allowParallel = F,
  MaxParallel = NULL,
  ...
)
}
\arguments{
\item{Symbols}{a character vector specifying the names of each symbol to be loaded (from R CRAN package quantmod function getSymbols)}

\item{env}{where to create objects. (.GlobalEnv) (from R CRAN package quantmod function getSymbols)}

\item{return.class}{class of returned object (from R CRAN package quantmod function getSymbols)}

\item{returnIndex}{one of "ObservationDate" (row element date) or "LastUpdatedDate" (vintage date). Default is ObservationDate".  Note, in FRED and ALFRED an 'observation date'(row element date) is  not the 'date of measurement'. The 'observation date' (typically) is (observes) the beginning of the 'date range' (its period: ObservationDate + Frequency).  The LastUpdatedDate date, that is, the vintage date of publication, is after the the period has completed, that is after  ObservationDate + Frequency.  See DATE(observation date a.k.a row element date), Frequency, Date Range, and 'Last Updated' in  in \url{https://fred.stlouisfed.org/data/RECPROUSM156N.txt}}

\item{VintageId}{download one specific vintage. User input is expected to be a vector of one. The vintage can be the form of a character or Date.  Default is NULL meaning try to download all vintages that have not been restricted elsewhere.  To otherwise restrict by range, see the parameter EarliestLastUpdDate.  To see the available vintage dates, use the function vinDates.}

\item{nameVintagedId}{add the VintageId (or the most recent "Last Updated" date VintageId) to the name of what is returned}

\item{EarliestLastUpdDate}{character or Date.  Earliest date that is before or 'at' the vintage 'Last Updated' date in the past that a user may wish to query upon. Default is NULL (no restriction).  This is useful in the situation when the user already owns prior data, and just wants just some recent data.  Internally, this just subtracts off some 'Last Updated' dates from the results of calling the function vinDates (xor vintages that have been entered by the user throught the paramter VintageId).  Note, if this paramter EarliestLastUpdDate, is used, the tail the returned data (older data) is not expected to be correct.  The reason is that, not all vintages can bee seen, so the clause is no longer true: "the first available datam per specific date of all vintages".}

\item{LookBack}{how deep in periods to look back for the latest observation in all of the non-oldest vintages.  Meant to use with datasets with a wide range of time between the Measurement interval and the Validity interval.  From the 'Last Updated' date try to peek back in time to the 1st vintage with a published tail 'Date Range' date that is within variable 'LookBack' periods. If the periodicy is "day" and, just after a three(3) day holiday weekend, to reach back from a Tuesday to a Friday, parameter LookBack is increased to a minimum value of 4.  Default is 3. Increase this value if much time exists between the tail date of 'Date Range' and the 'Last Updated' date: meaning zero(0) observations exist in the LookBack period.  The R CRAN package xts function periodicity determines the period of time.  This function is meant to minimize server-side CPU and disk I/O.  . Value can be "Beginning". "Beginning" means lookback to the start.}

\item{VintagesPerQuery}{number of vintages per HTTPS GET. A.k.a the number of vintages per sheet.   Default is 12.  Common maximum is 12. Value can be "Max". Practical experience has performed with 192.  The maximum may be different during different with not-a-known reason.  This parameter exists to enhance performance by limiting the number of trips to the server.  This parameter is sometimes (but not often) better than the parameter allowParallel. On many occasions  when using this parameter with values greater than 12, the requested data is missing from the returned data set.}

\item{FullOldestVintageData}{if TRUE, then also return the oldest vintage data and keep(prepend) its data.  Default is FALSE. Useful when 'as much data as possible' is important.}

\item{DataSheet}{if TRUE, then also return all of the vintages in an xts attribute 'DataSheet'. Default is FALSE.  Useful for debugging.  Useful as a tool of doing more (future) coding or user-end research.}

\item{allowParallel}{if TRUE, then collect groups of 'sheets of VintagesPerQuery vintages' in parallel.  Default is FALSE.  (Improved) performance will vary: this is more useful on (more data points) weekly data or daily data. Because this is a server side activity, the number of parallel processes does NOT depend on the local machine CPUs.}

\item{MaxParallel}{if allowParallel is TRUE, then set the maximum number of parallel processes. Default is NULL (no limit).  If this parameter is NULL, then the approximate maximum number of parallel processes is 'unique(ceiling(seq_along(vinDates(SYMBOL)/VintagesPerQuery)))' where the vector from vinDates(SYMBOL) may be reduced by limiting data using EarliestLastUpdDate. Good choices of this parameter may depend on, the amount of the client host hardware CPU and memory.}

\item{...}{additional parameters}
}
\value{
as R CRAN package quantmod function getSymbols. See the parameter returnIndex for a user-choice the xts objects returned index
}
\description{
R access to the latest observation(s) of the vintages of over seven hundred thousand data series accessible via the St. Louis Federal Reserve Bank's ALFRED (Archival FRED:  Federal Reserve Bank of St. Louis's _Archiva_L  _Federal _Reserve _Economic _Data) system \url{https://alfred.stlouisfed.org/}; collects and displays data from the ALFRED vintages that (as seen by a public user during a zone of time at FRED), 'per observation date', are the 1st appearance of an observation date (and its datum).
}
\details{
Downloads Symbols to specified environment (variable env) from 'research.stlouisfed.org'. This method is not to be called directly, instead a call to R CRAN packages quantmod function getSymbols(Symbols,src='ALFRED') will in turn call this method.

The St. Louis Federal Reserve Bank's FRED allows a specific data series to be revised(overwritten) called vintages with different data while and displaying new objservation dates and re-using the same observation dates of the same observations from a 'Date Range'.  The series author very often replaces the each data series with a new one. This replacement activity is data obscurity.  The past data series of FRED is not easily accessible. The past data series are accessible through ALFRED. The current data series of FRED and the past data series (that are no longer seen in FRED) are called vintages.  The original non-rewritten data is called the 1st vintage.  The (first) revision is called the 2nd vintage.  The (second) next revision is called the 3rd vintage and so-on.  The last revision is displayed at FRED. This function collects and displays data from the ALFRED vintages that 'per observation date', are the 1st appearance of an observation date (and its datum).

The functions is a tool in the process of examining a FRED data series of interest and identifying FRED data series that 'per observation' date and its datam, have much change compared to the next vintage's (same) 'per observation' date and its (potentially different) datum.  The process is looking for FRED data series that have vintages with highly volatile data, relative to the (same) 'per observation' date and its (potentially different) datum.
}
\examples{
\dontrun{

# Smoothed U.S. Recession Probabilities (RECPROUSM156N)
# Source: Piger, Jeremy Max, Chauvet, Marcelle
# https://fred.stlouisfed.org/series/RECPROUSM156N
# and
# https://fred.stlouisfed.org/data/RECPROUSM156N.txt
#
getSymbols("RECPROUSM156N", src =   "FRED")
[1] "RECPROUSM156N"

getSymbols("RECPROUSM156N", src = "ALFRED", LookBack = 4)

Processing vintages: 2012-09-04 ... 2013-08-08 of RECPROUSM156N.vin
Processing vintages: 2013-09-03 ... 2014-08-01 of RECPROUSM156N.vin
Processing vintages: 2014-09-01 ... 2015-08-06 of RECPROUSM156N.vin
Processing vintages: 2015-09-01 ... 2016-08-05 of RECPROUSM156N.vin
Processing vintages: 2016-09-01 ... 2017-08-03 of RECPROUSM156N.vin
Processing vintages: 2017-09-01 ... 2018-08-01 of RECPROUSM156N.vin
Processing vintages: 2018-09-03 ... 2019-09-03 of RECPROUSM156N.vin
Processing vintages: 2019-10-01 ... 2020-09-01 of RECPROUSM156N.vin
Processing vintages: 2020-10-01 ... 2020-10-01 of RECPROUSM156N.vin
[1] "RECPROUSM156N.vin"

# Note, the distance between the graphic date and the 'Last Updated' date
# is about two(2) months, so one may shift the graphic to the right
# by two(2) months to get the real story.
#
# See: 'Date Range' and
'Last Updated' in https://fred.stlouisfed.org/data/RECPROUSM156N.txt
# See: vinDates("RECPROUSM156N")
#
# rough way to get the real story based on 'Date Range' and "Last Updated"
# after the last observation date the "Last Updated" published date is two(2) months later
# the returnIndex parameter (default) is "ObservationDate (row/element date)
index(RECPROUSM156N) <- index(RECPROUSM156N) + 61
index(RECPROUSM156N.vin) <- index(RECPROUSM156N.vin) + 61
dygraphs::dygraph(merge(RECPROUSM156N, RECPROUSM156N.vin))

# better way to get the real story
# instead make observation dates to be the "Last Updated" published date.
# the returnIndex parameter is "LastUpdatedDate" (vintage published date)
getSymbols("RECPROUSM156N", src = "ALFRED", returnIndex = "LastUpdatedDate", LookBack = 4)
dygraphs::dygraph(merge(RECPROUSM156N, RECPROUSM156N.vin))

# get just this exact vintage data and all of its data
# To get all of the data the user chooses look back 100 years)
# (This series has known periods of one month long in duration)
getSymbols("RECPROUSM156N", src = "ALFRED", VintageId = "2020-01-02", LookBack = 1200)

# get this exact vintage and all of its data
getSymbols("RECPROUSM156N", src = "ALFRED", VintageId = "2020-01-02",
            LookBack = "Beginning")

# get just this exact vintage and its most recent data (some of its data)
# that is restricted by the default short time Lookback
getSymbols("RECPROUSM156N", src = "ALFRED", VintageId = "2020-01-02")

# same as above, and include the vintageid in the column name
getSymbols("RECPROUSM156N", src = "ALFRED", VintageId = "2020-01-02", nameVintagedId = T)
# Processing vintages: 2020-01-02 ... 2020-01-02 of RECPROUSM156N.vin.2020.01.02
# [1] "RECPROUSM156N.vin.2020.01.02"
RECPROUSM156N.vin.2020.01.02
#            RECPROUSM156N.vin.2020.01.02
# 2019-10-01                         1.82
# 2019-11-01                         0.60

# if too much time in periods exists between the
# tail date of  the 'Date Range' and 'Last Updated' date,
# then increase LookBack from three(3) (default) to four(4) or greater.
getSymbols("RECPROUSM156N", src = "ALFRED", LookBack = 4)

# for debugging, or further work one may include the vintages
getSymbols("RECPROUSM156N", src = "ALFRED", LookBack = 4, DataSheet = T)
# note: the user-chosen 'viewer' may have a limit on the number of columns displayed
View(data.frame(xtsAttributes(RECPROUSM156N.vin)$DataSheet))
# see the names of all columns
#   The column names format are the same names and formate as returned
#   by ALFRED (and unmodified) '(old)FRED series identifier'_YYYYMMDD.
#   YYYYMMDD is the 'Last Updated' date;
#     YYYY is the year and
#     MM is the month in number values of 01 through 12
#       representing January through December.
#     DD is the daty of the month from 01 through the last day of that month.
colnames(data.frame(xtsAttributes(RECPROUSM156N.vin)$DataSheet))

# From (above) https://fred.stlouisfed.org/data/RECPROUSM156N.txt
#    one knows that Frequency is 'Monthly'.
# To get  all of the data (in all of the vintages), set the
#   LookBack to be a 'high value' e.g. perhaps, 100 years
#   (1200: 12 months x 100 years)
#   (In this specific FRED series case, observation dates start in 1967)
getSymbols("RECPROUSM156N", src = "ALFRED", LookBack = 1200, DataSheet = T)
View(data.frame(xtsAttributes(RECPROUSM156N.vin)$DataSheet))

# prepend (include) the data of the very first vintage in the head of the data
getSymbols("RECPROUSM156N", src = "ALFRED", LookBack = 4, FullOldestVintageData = T)

# use R CRAN package doParallel to query simultaneously
getSymbols("RECPROUSM156N", src = "ALFRED", LookBack = 4, allowParallel = T)

# quarterly
# ALFRED was still in development in 2006;
#   moreover, not all FRED data series were being placed into ALFRED.
# Some FRED data series were/is popular enough and important enough
#   to be worth the effort to back-load its data into ALFRED.
# Gross Domestic Product (GDP)
#   is in ALFRED with 'Last Updated' dates that start in the year of 1991.
getSymbols("GDP", src = "ALFRED")
# noticably faster
getSymbols("GDP", src = "ALFRED", allowParallel = T)

# weekly
# Weekly, Ending Friday (reported during the following Wednesday)
# Chicago Fed National Financial Conditions Index (NFCI)
getSymbols("NFCI", src = "ALFRED")

# daily
# Effective Federal Funds Rate (EFFR)
getSymbols("EFFR", src = "ALFRED")
# sometimes better
# In the case of  using a large 'VintagesPerQuery',
#   very often much requested data is missing from the returned data.
getSymbols("EFFR", src = "ALFRED", VintagesPerQuery = 192)
# often better
getSymbols("EFFR", src = "ALFRED", allowParallel = T, MaxParallel = 8)

# the user does not want to query upon vintages before vintage at the
# 'Last Updated' date of "2020-01-01"
# Note, if this parameter is used, the tail the returned data (older data)
# is not expected to be correct.  The reason is that, not all vintages can bee seen,
# so the clause is no longer true:
# "the first available datam per specific date of all vintages".
getSymbols("EFFR", src = "ALFRED", EarliestLastUpdDate = "2020-01-01")
# better (just recent data)
getSymbols("EFFR", src = "ALFRED", EarliestLastUpdDate = Sys.Date() - 35)

# get multiple Symbols in one user execution
# using R CRAN package quantmod function getSymbols
getSymbols("RECPROUSM156N;GDP", src = "ALFRED", EarliestLastUpdDate = "2020-01-01",
           nameVintagedId = T)
# only the last Symbol is printed back to the console
# Moreover, both series are actually there.

# get multiple Symbols in one user execution
mapply(
  function(Symbol, VintageId, LookBack) {
    getSymbols(Symbol, src = "ALFRED", VintageId = VintageId,
                       nameVintagedId = T,
                       LookBack = LookBack, env = .GlobalEnv)
  },
  c("RECPROUSM156N",  "RECPROUSM156N", "GDP"),           # symbol
  c("2020-01-02",     "2019-01-02",    "2019-12-20"),    # vintageid
  c(18,                12,              6)               # lookback # months and quarters
)
Processing vintages: 2020-01-02 ... 2020-01-02 of RECPROUSM156N.vin.2020.01.02
Processing vintages: 2019-01-02 ... 2019-01-02 of RECPROUSM156N.vin.2019.01.02
Processing vintages: 2019-12-20 ... 2019-12-20 of GDP.vin.2019.12.20
                 RECPROUSM156N                  RECPROUSM156N                   GDP
"RECPROUSM156N.vin.2020.01.02" "RECPROUSM156N.vin.2019.01.02"  "GDP.vin.2019.12.20"
}
}
\references{
\cite{Blame of the code of the R CRAN package quantmod function getSymbols and getSymbols.FRED
\url{https://github.com/joshuaulrich/quantmod/blame/master/R/getSymbols.R}
}

\cite{ALFRED: Capturing data as it happens, Katrina Stierholz, Director of Library and Information Services, Federal Reserve Bank of St. Louis,
\url{https://alfred.stlouisfed.org/docs/alfred_capturing_data.pdf}
}

\cite{Richard G. Anderson, "Replicability, Real-Time Data, and the Science of Economic Research: FRED, ALFRED, and VDC," Federal Reserve Bank of St. Louis Review, January/February 2006, pp. 81-94.
\url{https://doi.org/10.20955/r.88.81-94}
\url{https://files.stlouisfed.org/files/htdocs/publications/review/06/01/Anderson.pdf}
}
}
\author{
Andre Mikulec   (adapted from the original code)

Jeffrey A. Ryan (original code that is inside the R CRAN package quantmod function getSymbols.FRED)
}
