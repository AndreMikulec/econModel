% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/customSorting.R
\name{cSort}
\alias{cSort}
\alias{cSort.default}
\alias{cSort.character}
\alias{cSort.numeric}
\alias{cSort.logical}
\alias{cSort.POSIXct}
\alias{cSort.POSIXlt}
\alias{cSort.Date}
\alias{cSort.yearmon}
\alias{cSort.yearqtr}
\alias{cSort.chron}
\alias{cSort.times}
\alias{cSort.dates}
\alias{cSort.timeDate}
\title{custom sorting a vector}
\usage{
cSort(x, ...)

\method{cSort}{default}(x, ...)

\method{cSort}{character}(x, InitOrder, sortVectExc = T, sortVectExcCI = F, chopVectExc = F, ...)

\method{cSort}{numeric}(x, InitOrder, ...)

\method{cSort}{logical}(x, InitOrder, ...)

\method{cSort}{POSIXct}(x, InitOrder, ...)

\method{cSort}{POSIXlt}(x, InitOrder, ...)

\method{cSort}{Date}(x, InitOrder, ...)

\method{cSort}{yearmon}(x, InitOrder, ...)

\method{cSort}{yearqtr}(x, InitOrder, ...)

\method{cSort}{chron}(x, InitOrder, ...)

\method{cSort}{times}(x, InitOrder, ...)

\method{cSort}{dates}(x, InitOrder, ...)

\method{cSort}{timeDate}(x, InitOrder, ...)
}
\arguments{
\item{x}{vector to be sorted}

\item{...}{dots passed}

\item{InitOrder}{starting custom sorting ( without the excess )}

\item{sortVectExc}{sort vector excess. T(default) whether or not Vector excess words
are attempted to be sorted (T) or not attempted to be sorted (F)}

\item{sortVectExcCI}{F(default) whether or not Vector excess words that are
not found in InitOrder are sorted 'not case insensitive'(T) or
'not case sensitive'(F).  Sorting is done by "lower()"}

\item{chopVectExc}{chop vector excess. F(default) whether or not excess (x) elements
not found in InitOrder are removed}
}
\value{
vector sorted by InitOrder
}
\description{
\preformatted{
Given a finite known number of exact words, perform a
custom sort of the words in vector x.  The parameter InitOrder
contains the exact literal words to be sorted and in the exact order.

This function is inspired by the custom sorting of database columns
that are done from inside the function dbWriteTable2
that is found inside the R CRAN package caroline.

R language S3 class implementations exist for some classes from packages
and R CRAN packages: base, zoo, chron, and timeDate.
Vector words are members of the following classes: character, numeric, logical,
POSIXct, POSIXlt,Date, yearmon, yearqtr,  chron, times, dates, timeDate

Contributions are welcome.
}

\preformatted{
}

\preformatted{
About excess vector elements(not found in InitOrder) that exist in 'x'
They may be appended to the end. chopVectExc = F (default)
Choices are sort or not-sort. sortVectExc = T(default)
Choices are CI(case insensitive) sortVectExcCI = T sort (default)
or case sensitive sortVectExcCI = F sort

Excess Vector elements(in InitOrder)
that do not exist in 'x' are simply ignored.
}

\preformatted{
}

\preformatted{
}

\preformatted{
}

\preformatted{
}

\preformatted{
}

\preformatted{
}

\preformatted{
}

\preformatted{
}

\preformatted{
}

\preformatted{
}

\preformatted{
}
}
\examples{
\dontrun{

# word examples

# Know exact words: "date", "o", "h", "l", "c", "v", "a"
# that may mean: Date, Open, High, Low, Close, Volume, Average
# are "custom sorted".
# Excess words placed at the end
# and the excess words, "E2" and "e3", are
# sorted in case-insensitive alphabetical order.
#
cSort( c("a","v", "E2", "c","l", "e3" ,"h","o","date"),
   InitOrder = c("date", "o", "h", "l", "c", "v", "a"), sortVectExcCI = T
)
[1] "date" "o"    "h"    "l"    "c"    "v"    "a"    "E2"   "e3"


# excess, "B" and "b", is not sorted
cSort(c("B","b","A","a"), c("a","A"), sortVectExc = F)
[1] "a" "A" "B" "b"

# excess, "B" and "b", are sorted case senstive (default)
cSort(c("B","b","A","a"), c("a","A"))
[1] [1] "a" "A" "b" "B"
}
\dontrun{

# numeric examples

cSort(c(5, 2, 3, 4 ,1 ), c(4, 2, 3))
[1] 4 2 3 1 5

cSort(c(5, 2, 3.0001, 4 ,1 ), c(4, 2, 3.0001))
[1] 4.0000 2.0000 3.0001 1.0000 5.0000
class(.Last.value)
[1] "numeric"

# integer(numeric) example

cSort(c(5L, 2L, 3L, 4L ,1L ), c(4L, 2L, 3L))
[1] 4 2 3 1 5
class(.Last.value)
[1] "integer"
}
\dontrun{

# logical example

cSort(c(F ,T, F, T, T, F, T, F), F)
[1] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE
}
\dontrun{

# Date examples

cSort(zoo::as.Date(6:3), zoo::as.Date(1:4))
[1] "1970-01-04" "1970-01-05" "1970-01-06" "1970-01-07"

cSort(zoo::as.Date(6:3), zoo::as.Date(1:4), sortVectExc = F)
[1] "1970-01-04" "1970-01-05" "1970-01-07" "1970-01-06"

cSort(zoo::as.Date(6:3), zoo::as.Date(1:4), sortVectExc = F, chopVectExc = T)
[1] "1970-01-04" "1970-01-05"
}
}
\references{
\cite{Custom Sorting in R \url{https://stackoverflow.com/questions/23995285/custom-sorting-in-r}}

\cite{Case insensitive sort of vector of string in R \url{https://stackoverflow.com/questions/29890303/case-insensitive-sort-of-vector-of-string-in-r}}

\cite{David Schruth, (2013). caroline: A Collection of Database, Data Structure, Visualization, and Utility Functions for R. R package version 0.7.6.
\url{https://CRAN.R-project.org/package=caroline}
}
}
