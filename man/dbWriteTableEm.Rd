% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AmerAssocIndividInvestorsAAII.R
\name{dbWriteTableEM}
\alias{dbWriteTableEM}
\title{Results column names are always in UPPERCASE.}
\usage{
dbWriteTableEM(
  conn,
  DfName = substitute(Df),
  Df,
  FillNull = TRUE,
  AddID = FALSE,
  RowNames = FALSE,
  PgUpdateSeq = FALSE,
  lowerDfName = TRUE,
  lowerColNames = TRUE,
  replaceDotUsingUnderscore = TRUE,
  ...
)
}
\arguments{
\item{conn}{A DBIConnection object, as returned by dbConnect().}

\item{DfName}{String.  Default is substitute(Df). The name of the table to which the data frame is to be loaded.}

\item{Df, }{data.frame. Required. To be loaded to the database.}

\item{FillNull}{Logical.  Default is TRUE. Should new db present fields be added to the data.frame before it is loaded?}

\item{AddID}{Logical. Default is FALSE.  Should a new column should be added for the database id?}

\item{RowNames}{Logical. Default is FALSE.  Should the row names be loaded as a separate column? (unlike the original dbWriteTable, default is FALSE).}

\item{PgUpdateSeq}{Logical. Default is FALSE. Should the table primary key's sequence be updated to the highest id value +1? (Postgres specific)}

\item{lowerDfName}{Logical. Default is TRUE. Make the target database table name to be in lowercase.}

\item{lowerColNames}{Logical. Default is TRUE. Make the target database table column names to be in lowercase.}

\item{replaceDotUsingUnderscore}{Logical. Default is TRUE. Make the target database table column names internal "dots" be converted to underscores(_).}

\item{...}{Dots. Other parameters passed to R CRAN package DBI dbWriteTable.}
}
\description{
Thin wrapper over R CRAN package caroline function dbWriteTable2
}
\examples{
\dontrun{
mtcars2 <- mtcars
mtcars2[["model"]] <- rownames(mtcars2)
mtcars2 <- DataCombine::MoveFront(mtcars2, Var = "model")
mtcars2[["vs"]] <- as.logical(mtcars2[["vs"]])
mtcars2[["gear"]] <- as.integer(mtcars2[["gear"]])
mtcars2[["carb"]] <- zoo::as.Date(mtcars2[["carb"]])
rownames(mtcars2) <- NULL
#
# Creates the table (with zero rows).
# Appends data (with the Df having the same columns that the server).
mtcars2s <- mtcars2[1:5,]
dbWriteTableEM(get("connEM"), Df = mtcars2s)

# Appends data (with the Df having less columns that the server database).
# Those server columns, that are not found in the Df, are added to the Df.
mtcars2lDf <- mtcars2[6:10, "model", drop = F]
dbWriteTableEM(get("connEM"), Df = mtcars2lDf)

# Appends data (with the server database having less columns that the Df).
# Those Df columns, that are not found in the server, are added to the sever.
mtcars2lSv <- {DfNew <- mtcars2[11:15, c("model","vs", "am", "gear", "carb")]
               colnames(DfNew) <- paste0(colnames(DfNew),"_new")
               DfNew[["model"]] <- DfNew[["model_new"]]
               DfNew <- DataCombine::MoveFront(DfNew, Var = "model")
               DfNew
              }; rm(DfNew)
dbWriteTableEM(get("connEM"), Df = mtcars2lSv)
}
}
